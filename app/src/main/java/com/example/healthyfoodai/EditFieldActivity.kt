package com.example.healthyfoodai

import android.content.Context
import android.os.Bundle
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

class EditFieldActivity : AppCompatActivity() {

    private lateinit var tvFieldTitle: TextView
    private lateinit var etFieldValue: EditText
    private lateinit var spinnerFieldValue: Spinner
    private lateinit var btnSave: Button

    private val auth = FirebaseAuth.getInstance()
    private val firestore = FirebaseFirestore.getInstance()

    private var fieldName: String = ""
    private var currentValue: String = ""

    private val genderOptions = listOf("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    private val goalOptions = listOf("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", "–£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
    private val activityOptions = listOf("–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_edit_field)

        tvFieldTitle = findViewById(R.id.tvFieldTitle)
        etFieldValue = findViewById(R.id.etFieldValue)
        spinnerFieldValue = findViewById(R.id.spinnerFieldValue)
        btnSave = findViewById(R.id.btnSaveField)

        fieldName = intent.getStringExtra("field_name") ?: ""
        currentValue = intent.getStringExtra("current_value") ?: ""

        title = "–ò–∑–º–µ–Ω–∏—Ç—å $fieldName"
        tvFieldTitle.text = "–ò–∑–º–µ–Ω–∏—Ç—å $fieldName"

        setupField()

        btnSave.setOnClickListener {
            confirmSave()
        }
    }

    private fun setupField() {
        when (fieldName) {
            "–ü–æ–ª" -> {
                etFieldValue.visibility = View.GONE
                spinnerFieldValue.visibility = View.VISIBLE
                spinnerFieldValue.adapter = ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, genderOptions)
                spinnerFieldValue.setSelection(genderOptions.indexOf(currentValue).coerceAtLeast(0))
            }
            "–¶–µ–ª—å" -> {
                etFieldValue.visibility = View.GONE
                spinnerFieldValue.visibility = View.VISIBLE
                spinnerFieldValue.adapter = ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, goalOptions)
                spinnerFieldValue.setSelection(goalOptions.indexOf(currentValue).coerceAtLeast(0))
            }
            "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" -> {
                etFieldValue.visibility = View.GONE
                spinnerFieldValue.visibility = View.VISIBLE
                spinnerFieldValue.adapter = ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, activityOptions)
                spinnerFieldValue.setSelection(activityOptions.indexOf(currentValue).coerceAtLeast(0))
            }
            else -> {
                etFieldValue.visibility = View.VISIBLE
                spinnerFieldValue.visibility = View.GONE
                etFieldValue.setText(currentValue)
            }
        }
    }

    private fun confirmSave() {
        val newValue = when (fieldName) {
            "–ü–æ–ª", "–¶–µ–ª—å", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" -> spinnerFieldValue.selectedItem.toString()
            else -> etFieldValue.text.toString().trim()
        }

        if (newValue.isEmpty()) {
            Toast.makeText(this, "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", Toast.LENGTH_SHORT).show()
            return
        }

        if (newValue == currentValue) {
            Toast.makeText(this, "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        saveField(newValue)
    }

    private fun saveField(newValue: String) {
        val userId = auth.currentUser?.uid ?: return

        val keyInFirestore = when (fieldName) {
            "–ò–º—è" -> "name"
            "–ü–æ–ª" -> "gender"
            "–í–æ–∑—Ä–∞—Å—Ç" -> "age"
            "–†–æ—Å—Ç" -> "height"
            "–í–µ—Å" -> "weight"
            "–¶–µ–ª—å" -> "goal"
            "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" -> "activity"
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" -> "allergies"
            else -> ""
        }

        if (keyInFirestore.isEmpty()) {
            Toast.makeText(this, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", Toast.LENGTH_SHORT).show()
            return
        }

        val valueForFirestore: Any = if (fieldName == "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è") {
            newValue.split(",").map { it.trim() }
        } else {
            newValue
        }

        firestore.collection("users").document(userId)
            .update(keyInFirestore, valueForFirestore)
            .addOnSuccessListener {
                saveLocally(keyInFirestore, newValue)
                Toast.makeText(this, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()

//                // üí° –ï—Å–ª–∏ –ø–æ–ª–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–ª–∞–Ω ‚Äî —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
//                if (keyInFirestore in listOf("goal", "weight", "height", "gender", "activity", "allergies")) {
//                    val prefs = getSharedPreferences("user_profile", Context.MODE_PRIVATE)
//                    prefs.edit().putBoolean("show_ai_plan_update_dialog", true).apply()
//                }

                finish()
            }
            .addOnFailureListener {
                Toast.makeText(this, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${it.message}", Toast.LENGTH_SHORT).show()
            }
    }

    private fun saveLocally(key: String, value: String) {
        val prefs = getSharedPreferences("user_profile", Context.MODE_PRIVATE)
        prefs.edit().putString(key, value).apply()
    }

    override fun onResume() {
        super.onResume()
        overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
    }
}