package com.example.healthyfoodai

import android.content.Context
import android.util.Log
import android.widget.Toast
import com.example.healthyfoodai.api.RetrofitMealPlanInstance
import com.example.healthyfoodai.utils.JsonFixer
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

// üîπ –ú–æ–¥–µ–ª–∏
data class GPTMessage(val role: String, val content: String)
data class GPTRequest(val model: String, val messages: List<GPTMessage>)
data class GPTChoice(val message: GPTMessage)
data class GPTResponse(val choices: List<GPTChoice>)

fun generateWeeklyPlanFromGPT(context: Context) {
    val userId = FirebaseAuth.getInstance().currentUser?.uid ?: return
    val firestore = FirebaseFirestore.getInstance()

    firestore.collection("weekly_plan").document(userId).get()
        .addOnSuccessListener { existing ->
            val createdAt = existing.get("createdAt") as? Long
            val sevenDaysInMillis = 7 * 24 * 60 * 60 * 1000
            val now = System.currentTimeMillis()

            if (createdAt != null && now - createdAt < sevenDaysInMillis) {
                Toast.makeText(context, "–ü–ª–∞–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω", Toast.LENGTH_SHORT).show()
                return@addOnSuccessListener
            }

            firestore.collection("users").document(userId).get()
                .addOnSuccessListener { doc ->
                    if (doc == null || !doc.exists()) {
                        Toast.makeText(context, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", Toast.LENGTH_SHORT).show()
                        return@addOnSuccessListener
                    }

                    val gender = doc.getString("gender") ?: "–º—É–∂—á–∏–Ω–∞"
                    val age = (doc.get("age") as? Long)?.toInt() ?: 25
                    val height = doc.getString("height")?.toIntOrNull() ?: 170
                    val weight = doc.getString("weight")?.toIntOrNull() ?: 70
                    val goal = doc.getString("goal") ?: "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"
                    val allergyRaw = doc.get("allergy")
                    val allergyList = when (allergyRaw) {
                        is String -> listOf(allergyRaw)
                        is List<*> -> allergyRaw.filterIsInstance<String>()
                        else -> emptyList()
                    }

                    // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø
                    val productGroups = mapOf(
                        "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" to listOf("–º–æ–ª–æ–∫–æ", "—Å—ã—Ä", "—Ç–≤–æ—Ä–æ–≥", "–π–æ–≥—É—Ä—Ç", "–∫–µ—Ñ–∏—Ä", "—Å–ª–∏–≤–∫–∏", "—Å–º–µ—Ç–∞–Ω–∞", "–º–∞—Å–ª–æ"),
                        "–æ–≤–æ—â–∏" to listOf("–∫–∞–ø—É—Å—Ç–∞", "–º–æ—Ä–∫–æ–≤—å", "–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–ª—É–∫", "—á–µ—Å–Ω–æ–∫", "–±–∞–∫–ª–∞–∂–∞–Ω", "–ø–µ—Ä–µ—Ü"),
                        "—Ñ—Ä—É–∫—Ç—ã" to listOf("—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–≥—Ä—É—à–∞", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–∫–∏–≤–∏", "–∞–Ω–∞–Ω–∞—Å"),
                        "–º—è—Å–æ" to listOf("–∫—É—Ä–∏—Ü–∞", "–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "–±–∞—Ä–∞–Ω–∏–Ω–∞", "–∏–Ω–¥–µ–π–∫–∞", "–ø–µ—á–µ–Ω—å", "–∫–æ–ª–±–∞—Å–∞"),
                        "—Ä—ã–±–∞" to listOf("–ª–æ—Å–æ—Å—å", "—Ç—É–Ω–µ—Ü", "—Ç—Ä–µ—Å–∫–∞", "—Å—ë–º–≥–∞", "—Ö–µ–∫", "–∫—Ä–µ–≤–µ—Ç–∫–∏", "–º–∏–¥–∏–∏"),
                        "–º—É–∫–∞" to listOf("–ø—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞", "—Ä–∂–∞–Ω–∞—è –º—É–∫–∞", "–æ–≤—Å—è–Ω–∞—è –º—É–∫–∞", "—Ö–ª–µ–±", "–±—É–ª–æ—á–∫–∏", "–ª–µ–ø—ë—à–∫–∏", "–±–ª–∏–Ω—ã", "–ª–∞–≤–∞—à", "–ø–∏—Ü—Ü–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã", "–ø–∞–Ω–∏—Ä–æ–≤–∫–∞")
                    )

                    val forbiddenExpanded = mutableSetOf<String>()
                    for (allergy in allergyList) {
                        val key = allergy.lowercase()
                        if (productGroups.containsKey(key)) {
                            forbiddenExpanded.addAll(productGroups[key]!!)
                        } else {
                            forbiddenExpanded.add(key)
                        }
                    }

                    val forbiddenText = if (forbiddenExpanded.isNotEmpty())
                        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∞–ª–ª–µ—Ä–≥–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è): ${forbiddenExpanded.joinToString(", ")}"
                    else
                        "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"

                    val prompt = """
                        –°–æ—Å—Ç–∞–≤—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                        –ü–æ–ª: $gender
                        –í–æ–∑—Ä–∞—Å—Ç: $age
                        –†–æ—Å—Ç: $height —Å–º
                        –í–µ—Å: $weight –∫–≥
                        –¶–µ–ª—å: $goal
                        $forbiddenText

                        –ù–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –¥–æ–±–∞–≤—å 4 –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏: –ó–∞–≤—Ç—Ä–∞–∫, –û–±–µ–¥, –£–∂–∏–Ω, –ü–µ—Ä–µ–∫—É—Å.

                        –ö–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å —Ç–∞–∫–∏–º–∏ –ø–æ–ª—è–º–∏:
                        - name (–Ω–∞–∑–≤–∞–Ω–∏–µ)
                        - calories (–≤ –∫–∫–∞–ª)
                        - proteins, fats, carbs (–≤ –≥—Ä–∞–º–º–∞—Ö)
                        - ingredients (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
                        - steps (–º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è)
                        - unhealthyFactors (–≤—Ä–µ–¥–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å: "—Å–∞—Ö–∞—Ä", "–∂–∞—Ä–µ–Ω–æ–µ", "—Å–æ–ª—å")

                        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ JSON:
                        {
                          "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [ { ... }, { ... }, ... ],
                          ...
                        }
                    """.trimIndent()

                    CoroutineScope(Dispatchers.IO).launch {
                        try {
                            val messages = listOf(
                                GPTMessage("system", "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥, –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON."),
                                GPTMessage("user", prompt)
                            )

                            val request = GPTRequest("gpt-3.5-turbo", messages)
                            val response = RetrofitMealPlanInstance.api.generatePlan(request)

                            val rawJson = response.choices.firstOrNull()?.message?.content ?: ""
                            Log.d("GPT_PLAN", "üì© GPT –æ—Ç–≤–µ—Ç: $rawJson")

                            val fixedJson = JsonFixer.convertDaysToArrays(rawJson)
                            Log.d("GPT_PLAN", "üõ† –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON: $fixedJson")

                            try {
                                val planMap: Map<String, List<Map<String, Any>>> =
                                    Gson().fromJson(fixedJson, object : TypeToken<Map<String, List<Map<String, Any>>>>() {}.type)

                                if (planMap.size < 7) {
                                    Log.e("GPT_PLAN", "‚ùå GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ ${planMap.size} –¥–Ω–µ–π. –ü–æ–≤—Ç–æ—Ä.")
                                    withContext(Dispatchers.Main) {
                                        Toast.makeText(context, "GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.", Toast.LENGTH_SHORT).show()
                                    }
                                    return@launch
                                }

                                val dataToSave = hashMapOf<String, Any>(
                                    "createdAt" to System.currentTimeMillis()
                                )

                                for ((day, meals) in planMap) {
                                    val enrichedMeals = meals.mapIndexed { index, meal ->
                                        val mealWithType = HashMap(meal)
                                        mealWithType["type"] = when (index) {
                                            0 -> "–ó–∞–≤—Ç—Ä–∞–∫"
                                            1 -> "–û–±–µ–¥"
                                            2 -> "–£–∂–∏–Ω"
                                            3 -> "–ü–µ—Ä–µ–∫—É—Å"
                                            else -> "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                                        }
                                        mealWithType
                                    }
                                    dataToSave[day] = enrichedMeals
                                }

                                firestore.collection("weekly_plan").document(userId)
                                    .set(dataToSave)
                                    .addOnSuccessListener {
                                        CoroutineScope(Dispatchers.Main).launch {
                                            Toast.makeText(context, "AI-–ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", Toast.LENGTH_SHORT).show()
                                        }
                                    }
                                    .addOnFailureListener {
                                        CoroutineScope(Dispatchers.Main).launch {
                                            Toast.makeText(context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", Toast.LENGTH_SHORT).show()
                                        }
                                    }

                            } catch (e: Exception) {
                                Log.e("GPT_PLAN", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}")
                                withContext(Dispatchers.Main) {
                                    Toast.makeText(context, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI-–ø–ª–∞–Ω–∞", Toast.LENGTH_SHORT).show()
                                }
                            }

                        } catch (e: Exception) {
                            Log.e("GPT_PLAN", "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${e.message}")
                            withContext(Dispatchers.Main) {
                                Toast.makeText(context, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–ø–ª–∞–Ω–∞", Toast.LENGTH_SHORT).show()
                            }
                        }
                    }
                }
        }
}
